<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:model="clr-namespace:TrackCubed.Shared.Models;assembly=TrackCubed.Shared"
             xmlns:dtos="clr-namespace:TrackCubed.Shared.DTOs;assembly=TrackCubed.Shared"
             xmlns:viewmodel="clr-namespace:TrackCubed.Maui.ViewModels"
             xmlns:converters="clr-namespace:TrackCubed.Maui.Converters"
             x:DataType="viewmodel:MainPageViewModel"
             x:Class="TrackCubed.Maui.Views.MainPage"
             Shell.NavBarIsVisible="False" 
              Title="{Binding Title}"
             BackgroundColor="{AppThemeBinding Light={StaticResource PageBackgroundColorLight}, Dark={StaticResource PageBackgroundColorDark}}">

    <ContentPage.Resources>
        <converters:IsNotNullOrEmptyConverter x:Key="IsNotNullOrEmptyConverter" />
        <converters:ItemTypeToIconConverter x:Key="ItemTypeToIconConverter" />
    </ContentPage.Resources>
    <!-- This is the single, top-level layout container -->
    <Grid RowDefinitions="Auto, *" RowSpacing="0">

        <!--  ROW 0: CUSTOM TITLE BAR -->
        <Grid Grid.Row="0" Padding="10" BackgroundColor="{StaticResource Primary}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Image Grid.Column="0" Source="logo_transparent.png" HeightRequest="30" WidthRequest="30" VerticalOptions="Center"/>
            <Label Grid.Column="1" Text="Track³ | My Cubes" TextColor="White" FontSize="Title" FontAttributes="Bold" VerticalOptions="Center" Margin="10,0,0,0" />
            <Button Grid.Column="2" Text="Sign Out" Command="{Binding SignOutCommand}" BackgroundColor="Transparent" TextColor="White" BorderWidth="0" VerticalOptions="Center" />
        </Grid>

        <!-- ===== ROW 1: MAIN PAGE CONTENT (Filters and List) ===== -->
        <Grid Grid.Row="1" RowDefinitions="Auto, *">
            <!-- Row 0: Search and Filter Controls -->
            <VerticalStackLayout Grid.Row="0" Padding="10" Spacing="5">
                <SearchBar Placeholder="Search text fields..."
                   Text="{Binding SearchText}" />
                <Picker Title="Filter by Type"
                ItemsSource="{Binding ItemTypeFilterOptions}"
                SelectedItem="{Binding SelectedItemTypeFilter}" 
                        ItemDisplayBinding="{Binding Name}"/>


                <!-- Input for adding a new tag filter -->
                <Grid ColumnDefinitions="*,Auto" ColumnSpacing="10">
                    <Entry Grid.Column="0" 
                   Placeholder="Add a tag to filter"
                   Text="{Binding TagSearchText}" />
                    <Button Grid.Column="1" 
                    Text="+ Filter Tag" 
                    Command="{Binding AddTagFilterCommand}" 
                    CommandParameter="{Binding TagSearchText}"/>
                </Grid>

                <!-- START: NEW UI FOR TAG SUGGESTIONS  -->

                <!-- This CollectionView will only appear when there are suggestions -->
                <CollectionView ItemsSource="{Binding TagSuggestions}"
                IsVisible="{Binding TagSuggestions.Count, Converter={StaticResource CountToBoolConverter}}"
                SelectionMode="Single"
                Margin="0, -5, 0, 5">
                    <CollectionView.ItemTemplate>
                        <DataTemplate x:DataType="{x:Type x:String}">
                            <Frame Padding="10, 8" Margin="0" BorderColor="LightGray" CornerRadius="0"
                   BackgroundColor="{AppThemeBinding Light={StaticResource PopupBackgroundColorLight}, Dark={StaticResource PopupBackgroundColorDark}}">
                                <Label Text="{Binding .}" 
                       TextColor="{AppThemeBinding Light={StaticResource PopupTextColorLight}, Dark={StaticResource PopupTextColorDark}}"/>
                                <Frame.GestureRecognizers>
                                    <TapGestureRecognizer 
                        Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainPageViewModel}}, Path=AddTagFilterCommand}"
                        CommandParameter="{Binding .}"/>
                                </Frame.GestureRecognizers>
                            </Frame>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>

                <!-- START: NEW UI FOR TAG SEARCH MODE -->
                <HorizontalStackLayout Spacing="10" Margin="0,10,0,0" VerticalOptions="Center">
                    <Switch IsToggled="{Binding IsExclusiveTagSearch}" />
                    <Label Text="Match ALL of the selected tags (exclusive)" 
           VerticalOptions="Center" />
                </HorizontalStackLayout>
                <!-- END: NEW UI FOR TAG SEARCH MODE -->

                <!-- Display area for currently applied tag filters -->
                <FlexLayout BindableLayout.ItemsSource="{Binding AppliedTags}" 
                    Wrap="Wrap" 
                    Margin="0,5,0,0">
                    <BindableLayout.ItemTemplate>
                        <DataTemplate x:DataType="{x:Type x:String}">
                            <Frame Padding="10,5" Margin="0,0,5,5" CornerRadius="15" 
                           BackgroundColor="{StaticResource Secondary}">
                                <Grid ColumnDefinitions="*,Auto" ColumnSpacing="10">
                                    <Label Grid.Column="0" Text="{Binding .}" 
                                   TextColor="{StaticResource Primary}" 
                                   VerticalOptions="Center"/>
                                    <Button Grid.Column="1" Text="X" FontSize="10" 
                                    TextColor="{StaticResource Primary}"
                                    BackgroundColor="Transparent"
                                    BorderWidth="0"
                                    Padding="0" HeightRequest="20" WidthRequest="20"
                                    Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainPageViewModel}}, Path=RemoveTagFilterCommand}"
                                    CommandParameter="{Binding .}"/>
                                </Grid>
                            </Frame>
                        </DataTemplate>
                    </BindableLayout.ItemTemplate>
                </FlexLayout>


            </VerticalStackLayout>
            <!-- Row 1: The list -->
            <!-- The RefreshView wraps the list and provides pull-to-refresh -->
            <RefreshView Grid.Row="1"
                     Command="{Binding RefreshCommand}"
                     IsRefreshing="{Binding RefreshCommand.IsRunning}">
                <CollectionView ItemsSource="{Binding Items}"
                            RemainingItemsThreshold="5"
                    RemainingItemsThresholdReachedCommand="{Binding LoadMoreCommand}">
                    <CollectionView.ItemTemplate>
                        <!-- In your DataTemplate for the CollectionView... -->
                        <DataTemplate x:DataType="dtos:CubedItemDto">
                            <Frame Padding="15" Margin="10" CornerRadius="8" HasShadow="True"
                                    BackgroundColor="{AppThemeBinding Light={StaticResource FrameBackgroundColorLight}, Dark={StaticResource FrameBackgroundColorDark}}">
                                <Frame.GestureRecognizers>
                                    <TapGestureRecognizer 
                                        Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainPageViewModel}}, Path=GoToEditItemCommand}"
                                        CommandParameter="{Binding .}"/>
                                </Frame.GestureRecognizers>

                                <!-- Use a Grid as the top-level container to place the delete button -->
                                <Grid ColumnDefinitions="*, Auto">

                                    <!--START: THE FIX -->
                                    <!-- Use a VerticalStackLayout for all the details in the first column -->
                                    <VerticalStackLayout Grid.Column="0" Spacing="5">

                                        <!-- 1. The Title Line: A Grid for horizontal alignment -->
                                        <Grid ColumnDefinitions="Auto, *" ColumnSpacing="8">
                                            <Label Grid.Column="0" Text="🧊" FontSize="Subtitle" VerticalOptions="Center" />
                                            <Label Grid.Column="1" Text="{Binding Name}" FontSize="Large" FontAttributes="Bold" 
                                                   TextColor="{AppThemeBinding Light={StaticResource PrimaryTextColorLight}, Dark={StaticResource PrimaryTextColorDark}}"
                                                   LineBreakMode="WordWrap" />
                                        </Grid>

                                        <!-- 2. The rest of the details stack vertically below -->
                                        <Label Text="{Binding Description}" FontSize="Small" 
                                           TextColor="{AppThemeBinding Light={StaticResource SecondaryTextColorLight}, Dark={StaticResource SecondaryTextColorDark}}"
                                           LineBreakMode="WordWrap" />

                                        <!-- This HorizontalStackLayout will only appear if the 'Link' property is not null or empty.-->
                                        <HorizontalStackLayout Spacing="5"
                                            IsVisible="{Binding Link, Converter={StaticResource IsNotNullOrEmptyConverter}}">

                                            <!-- 1. The static "Source:" label with normal styling -->
                                            <Label Text="Source:"
                                               FontSize="Micro" 
                                               TextColor="{AppThemeBinding Light={StaticResource SecondaryTextColorLight}, Dark={StaticResource SecondaryTextColorDark}}"
                                               VerticalOptions="Center"/>

                                            <!-- 2. The dynamic link Label, styled as a hyperlink -->
                                            <Label Text="{Binding Link}" 
                                               FontSize="Micro"
                                               TextColor="{StaticResource Primary}"
                                               TextDecorations="Underline"
                                               VerticalOptions="Center"
                                               LineBreakMode="TailTruncation">
                                                <!-- Good for very long links -->
                                                <Label.GestureRecognizers>
                                                    <!-- The tap gesture is now ONLY on the link part -->
                                                    <TapGestureRecognizer
                                                        Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainPageViewModel}}, Path=OpenLinkCommand}"
                                                        CommandParameter="{Binding Link}" />
                                                </Label.GestureRecognizers>
                                            </Label>
                                        </HorizontalStackLayout>
                                        
                                        <!-- This entire layout will only be visible if there's an ItemTypeName -->
                                        <HorizontalStackLayout Spacing="5" Margin="0,5,0,0"
                                                IsVisible="{Binding ItemTypeName, Converter={StaticResource IsNotNullOrEmptyConverter}}">

                                            <!-- The Emoji Label: Uses the converter -->
                                            <Label Text="{Binding ItemTypeName, Converter={StaticResource ItemTypeToIconConverter}}"
                                                   FontSize="Micro"
                                                   VerticalOptions="Center" />

                                            <!-- The Text Label: Displays the type name -->
                                            <Label FontSize="Micro"
                                                   FontAttributes="Italic"
                                                   TextColor="{AppThemeBinding Light={StaticResource Gray500}, Dark={StaticResource Gray400}}"
                                                   VerticalOptions="Center">
                                                <Label.FormattedText>
                                                    <FormattedString>
                                                        <Span Text="Type: "/>
                                                        <Span Text="{Binding ItemTypeName}"/>
                                                    </FormattedString>
                                                </Label.FormattedText>
                                            </Label>

                                        </HorizontalStackLayout>

                                        <!-- 3. The Tags layout now sits correctly at the bottom of the stack -->
                                        <!-- Display area for currently applied tags -->
                                        <FlexLayout BindableLayout.ItemsSource="{Binding Tags}"
                                                    Wrap="Wrap"
                                                    Margin="0,10,0,0">
                                            <BindableLayout.ItemTemplate>
                                                <DataTemplate x:DataType="{x:Type x:String}">
                                                    <Border Padding="8,4" Margin="0,0,5,5"
                                                            StrokeThickness="0"
                                                            BackgroundColor="{StaticResource Secondary}">
                                                        <Border.StrokeShape>
                                                            <RoundRectangle CornerRadius="10" />
                                                        </Border.StrokeShape>

                                                        <Label Text="{Binding .}" 
                                                           TextColor="{StaticResource Primary}" 
                                                           FontSize="10"/>              
                                                    </Border>
                                                </DataTemplate>
                                            </BindableLayout.ItemTemplate>
                                        </FlexLayout>
                                    </VerticalStackLayout>

                                    <!-- The delete button sits in the second column of the main Grid -->
                                    <Button Grid.Column="1" 
                                        Text="✖" 
                                        VerticalOptions="Start"
                                        BackgroundColor="Red"
                                        Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:MainPageViewModel}}, Path=DeleteCubedItemCommand}"
                                        CommandParameter="{Binding .}"/>        
                                </Grid>
                            </Frame>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                    <CollectionView.Footer>
                        <!-- The footer's spinner is bound to the LOAD MORE command's state -->
                        <ActivityIndicator IsVisible="{Binding LoadMoreCommand.IsRunning}"
                               IsRunning="{Binding LoadMoreCommand.IsRunning}"
                               HorizontalOptions="Center"
                               Margin="20" />
                    </CollectionView.Footer>
                </CollectionView>
            </RefreshView>

            <!-- Floating Action Button for "Add" -->
            <Button Text="+" 
                    Command="{Binding AddNewItemCommand}"
                    HorizontalOptions="End" 
                    VerticalOptions="End" 
                    Margin="20"
                    HeightRequest="50"
                    WidthRequest="50"
                    CornerRadius="25"
                    Grid.Row="1" />
        </Grid>
    </Grid>
</ContentPage>
